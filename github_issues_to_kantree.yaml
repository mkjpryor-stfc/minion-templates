description: >-
  Create Kantree cards in a project for each open issue in a GitHub repository.

parameters:
  github.repository_name:
    hint: Name of the GitHub repository to read issues from
    example: cedadev/jasmin-cloud
  kantree.project_name:
    hint: Name of the Kantree project to create cards in
    example: My Project Name
  kantree.context_name:
    hint: >-
      Name of a context in the Kantree project - a new group will be created
      with the repository name
    default: Components
  kantree.closed_group:
    hint: |
      A Kantree group to apply to closed issues.
      Should be a YAML map of the form {type: <context name>, name: <group name>}.
    default: {type: Lists, name: Done}

spec:
  functionRef:
    path: minion.functions.compose
    functions:
      - functionRef:
          path: minion.connectors.github.issues_for_repository
          session:
            connectorRef: "github"
          repository_name:
            parameterRef: "github.repository_name"

      # Filter out the pull requests
      - functionRef:
          path: minion.functions.filter
          predicate:
            functionRef:
              path: minion.functions.expression
              expression: "not input.pull_request|default(none)"

      # The output of this step is a tuple containing two iterables - (issues, existing cards)
      - functionRef:
          path: minion.functions.fork
          functions:
            - functionRef:
                path: minion.functions.identity
            - functionRef:
                path: minion.connectors.kantree.cards_for_project
                session:
                  connectorRef: "kantree"
                project_name:
                  parameterRef: "kantree.project_name"

      # The output of this step is an iterable of (issue, matching card) tuples
      # If there is no matching card in the project, it is None
      - functionRef:
          path: minion.functions.zip_matching
          matcher:
            functionRef:
              path: minion.functions.expression
              # Getting the attached URLs for a card is pretty contrived
              expression: >-
                input.0.html_url in input.1.attributes|selectattr('type', 'eq', 'files')|sum(attribute='value', start=[])|map(attribute='url')

      # The output of this step is an iterable of (existing card, desired state) tuples
      - functionRef:
          path: minion.functions.map
          function:
            functionRef:
              path: minion.functions.fork
              functions:
                - functionRef:
                    path: minion.functions.expression
                    expression: input.1
                - functionRef:
                    path: minion.functions.template
                    globals:
                      repository_name:
                        parameterRef: "github.repository_name"
                      context_name:
                        parameterRef: "kantree.context_name"
                      closed_group:
                        parameterRef: "kantree.closed_group"
                    template: |
                      title: >-
                        {{ input.0.title }}
                      model_name: Issue
                      {% if input.0.closed_at and not input.1.finished %}
                      state: completed
                      {% elif not input.0.closed_at and input.1.finished %}
                      state: undecided
                      {% endif %}
                      {% if not input.0.closed_at %}
                      archived: false
                      {% endif %}
                      links:
                        - {{ input.0.html_url }}
                      # Use groups for the fixed groups
                      # Copy the labels from the issue - in Kantree, labels are a group type
                      groups:
                        - type: {{ context_name }}
                          name: {{ repository_name.split("/", 1)[1] }}
                      {% for label in input.0.labels | map(attribute = 'name') %}
                        - type: Labels
                          name: {{ label }}
                      {% endfor %}
                      # Use groups{_add,_remove} for the closed_group
                      {% if input.0.closed_at %}
                      groups_add:
                        - type: {{ closed_group.type }}
                          name: {{ closed_group.name }}
                      {% else %}
                      groups_remove:
                        - type: {{ closed_group.type }}
                          name: {{ closed_group.name }}
                      {% endif %}

      # Create or update the card for each item
      - functionRef:
          path: minion.functions.map
          function:
            functionRef:
              path: minion.connectors.kantree.create_or_update_card
              session:
                connectorRef: "kantree"
              project_name:
                parameterRef: "kantree.project_name"
