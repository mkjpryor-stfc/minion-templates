description: Mirrors Kantree cards in a particular group into another group in a different project.

parameters:
  kantree.source_project:
    hint: The name of the Kantree project to sync cards from.
    example: My Personal Tasks
  kantree.source_group:
    hint: |
      The Kantree group to sync cards from.
      Should be a YAML map of the form {type: <context name>, name: <group name>}.
    default: {type: Lists, name: "In Progress"}
  kantree.target_project:
    hint: The name of the Kantree project to sync cards to.
    example: CEDA Development Group Tasks
  kantree.target_group:
    hint: |
      The Kantree group to sync cards to.
      Should be a YAML map of the form {type: <context name>, name: <group name>}.
    default: {type: Lists, name: "Tasks for Today"}

spec:
  functionRef:
    path: minion.functions.compose
    functions:
      # The output of this step is a tuple containing two iterables - (cards in source project, cards in target project)
      - functionRef:
          path: minion.functions.fork
          functions:
            - functionRef:
                path: minion.connectors.kantree.cards_for_project
                session:
                  connectorRef: kantree
                project_name:
                  parameterRef: "kantree.source_project"
            - functionRef:
                path: minion.connectors.kantree.cards_for_project
                session:
                  connectorRef: kantree
                project_name:
                  parameterRef: "kantree.target_project"

      # The output of this step is an iterable of (card in source project, mirror card in target project) tuples
      # If the card has no mirror card, it is None
      - functionRef:
          path: minion.functions.zip_matching
          matcher:
            functionRef:
              path: minion.functions.expression
              # If the source card is itself a link, then Kantree resolves the "link of a link"
              expression: >
                input.1.is_link and (
                  (input.0.is_link and input.1.link.id == input.0.link.id) or
                  (input.1.link.id == input.0.id)
                )

      # This step creates/updates or deletes mirror cards where required
      - functionRef:
          path: minion.functions.map
          function:
            functionRef:
              path: minion.functions.case
              cases:
                # If the source card is in the source group, create/update the mirror card
                - condition:
                    functionRef:
                      path: minion.functions.template
                      globals:
                        source_group:
                          parameterRef: "kantree.source_group"
                      # This template produces a list of matching groups that the card has, or None
                      # So when it is evaluated as a boolean, it gives "card is in group"
                      template: |
                        {% for group in input.0.groups %}
                        # The group title must match
                        {% if group.title != source_group.name %}{% continue %}{% endif %}
                        # The parent ID must be the top level card for the project
                        {% if group.parent_id != input.0.project.top_level_card.id %}{% continue %}{% endif %}
                        # The group type name must match
                        {% if input.0.project.group_types.fetch_one(group.type_id).name != source_group.type %}{% continue %}{% endif %}
                        # If we get this far, output the group id
                        - {{ group.id }}
                        {% endfor %}
                  function:
                    functionRef:
                      path: minion.functions.compose
                      functions:
                        # The output of this step is a (mirror card, updates) tuple
                        - functionRef:
                            path: minion.functions.fork
                            functions:
                              - functionRef:
                                  path: minion.functions.expression
                                  expression: "input.1"
                              - functionRef:
                                  path: minion.functions.template
                                  globals:
                                    target_group:
                                      parameterRef: "kantree.target_group"
                                  template: |
                                    # Only include the link stuff when creating
                                    {% if not input.1 %}
                                    link_to: {{ input.0.id }}
                                    link_has_own_attributes: false
                                    {% endif %}
                                    # Make sure the card is in the target group
                                    groups:
                                      - type: {{ target_group.type }}
                                        name: {{ target_group.name }}
                        - functionRef:
                            path: minion.connectors.kantree.create_or_update_card
                            session:
                              connectorRef: kantree
                            project_name:
                              parameterRef: "kantree.target_project"
                # If the source card is finished and there is a mirror card, remove it
                - condition:
                    functionRef:
                      path: minion.functions.expression
                      expression: "input.1 is not none and input.0.finished"
                  function:
                    functionRef:
                      path: minion.functions.compose
                      functions:
                        # Extract just the mirror card from the tuple to pass to the delete step
                        - functionRef:
                            path: minion.functions.expression
                            expression: "input.1"
                        - functionRef:
                            path: minion.connectors.kantree.delete_card
                            session:
                              connectorRef: kantree
                # In all other cases there is nothing to do
