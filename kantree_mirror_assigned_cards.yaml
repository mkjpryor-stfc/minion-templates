description: Mirror assigned Kantree cards to a Kantree project.

parameters:
  kantree.project_name:
    hint: Kantree project to mirror cards into.
    example: My Personal Tasks
  kantree.context_name:
    hint: >-
      Name of a context in the Kantree project - a new group will be created
      for each project that a card is mirrored from
    default: Projects
  kantree.completed_group:
    hint: |
      A Kantree group to apply to completed cards.
      Should be a YAML map of the form {type: <context name>, name: <group name>}.
    default: {type: Lists, name: Done}

spec:
  functionRef:
    path: minion.functions.compose
    functions:
      - functionRef:
          path: minion.connectors.kantree.cards_assigned_to_user
          session:
            connectorRef: kantree

      # Ignore any cards that are links themselves
      - functionRef:
          path: minion.functions.filter
          predicate:
            functionRef:
              path: minion.functions.expression
              expression: "not input.is_link"

      # The output of this step is a tuple containing two iterables - (assigned cards, cards on board)
      - functionRef:
          path: minion.functions.fork
          functions:
            - functionRef: { path: minion.functions.identity }
            - functionRef:
                path: minion.connectors.kantree.cards_for_project
                session:
                  connectorRef: kantree
                project_name:
                  parameterRef: "kantree.project_name"

      # The output of this step is an iterable of (assigned card, matching card in project) tuples
      # If there is no matching card in the project, it is None
      - functionRef:
          path: minion.functions.zip_matching
          matcher:
            functionRef:
              path: minion.functions.expression
              expression: "input.1.is_link and input.0.id == input.1.link.id"

      # Map the remaining tuples onto a mirror card structure
      # The output of this step is an iterable of (existing card, desired state) tuples
      - functionRef:
          path: minion.functions.map
          function:
            functionRef:
              path: minion.functions.fork
              functions:
                - functionRef:
                    path: minion.functions.expression
                    expression: input.1
                - functionRef:
                    path: minion.functions.template
                    globals:
                      context_name:
                        parameterRef: "kantree.context_name"
                      completed_group:
                        parameterRef: "kantree.completed_group"
                    template: |
                      # Only include the link stuff when creating
                      {% if not input.1 %}
                      link_to: {{ input.0.id }}
                      link_has_own_attributes: false
                      {% endif %}
                      # Use groups for the fixed groups
                      groups:
                        - type: {{ context_name }}
                          name: {{ input.0.project.title }}
                      # Use groups{_add,_remove} for the completed_group
                      {% if input.0.state == "completed" %}
                      groups_add:
                        - type: {{ completed_group.type }}
                          name: {{ completed_group.name }}
                      {% else %}
                      groups_remove:
                        - type: {{ completed_group.type }}
                          name: {{ completed_group.name }}
                      {% endif %}

      # Create the cards
      - functionRef:
          path: minion.functions.map
          function:
            functionRef:
              path: minion.connectors.kantree.create_or_update_card
              session:
                connectorRef: kantree
              project_name:
                parameterRef: "kantree.project_name"
